; beggar.ahk/exe
; Discord / Dank Memer Beg Bot
; Ron Egli / github.com/smugzombie

AppName = Pls Bot
version = 1.1.8a
#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.
#SingleInstance, force
#Persistent
#Include, inc/json.ahk

global OpenWindows := ""
; Load the JSON Config file
dumpIcon()
loadConfig()
Build_Menu()

Gui, +OwnDialogs +owner -MaximizeBox -MinimizeBox +LastFound +AlwaysOnTop
Gui, Add, Text, x10 y9, Active:
Gui, Add, DDL, y6 x50 w220 vDiscordWindows,
Gui, Add, Button, y5 x275 w50 gClearOpenDiscord, Fetch
Gui, Add, Text, x10 y35, Action: 
Gui, Add, ComboBox, x50 y32 w220 vActions, %History%
;Gui, Add, Button, y31 x275 w50 vRunButton gbeg, Run


if (hideGui == 0) {
	gosub ShowGui
	;Gui, Submit
}

; Fetch the most recent copy of open Discord Windows
goSub ClearOpenDiscord
; Process those windows
Gosub, processWindows
return

; Clears the current GUI of open discord windows, then loads them again
ClearOpenDiscord:
GuiControl,, DiscordWindows, |
OpenPutty :=
goSub, GetOpenDiscord
return

; Fetches the latest truth of what is "open" regarding discord
GetOpenDiscord:
Gui, Submit, Nohide
WinGet, id, list,,, Program Manager
OpenWindows := ""
Menu,OpenWindows,DeleteAll
; Loop through all windows to find "discord" specific ones
Loop, %id%
{
    this_id := id%A_Index%
    WinGetClass, this_class, ahk_id %this_id%
    WinGetTitle, this_title, ahk_id %this_id%
	if(this_class = winClass){
		IfInString, this_title, %winTitle%
		{
			GuiControl,, DiscordWindows, %this_title%||
			OpenWindows = %OpenWindows%,%this_id%
			Menu, OpenWindows, Add, %this_title%, doNothing
		}
	}
	; Do this again in 5 seconds
	SetTimer, ClearOpenDiscord, 5000
}
; Trim off the opening ,
OpenWindows := SubStr(OpenWindows, 2, StrLen(OpenWindows))
return

processWindows:
	Build_Menu()
	;MsgBox "%OpenWindows%"
	if(OpenWindows == ""){
		; Skip doing anything, couldn't find a window.
	}
	else{
		IfInString, OpenWindows, ,
		{
			; If we found multiple windows, iterate through them
			for each, Window_id in Windows
			{
				discordCommand(Window_id)
			}
		}
		Else
		{
			; Otherwise just process the one
			discordCommand(OpenWindows)
		}
	}
	; If none were found, sleep for 5 seconds and try again, Otherwise sleep for 5 seconds anyway

	Sleep 5000
	; Then call self to start all over again.
	Gosub, processWindows

Return

discordCommand(WindowId){
	global
	;WinActivate, ahk_id %WindowId%
	WinGetActiveTitle, SwitchBack
	for each, loc_Command in Commands
	{
		command_enabled := loc_Command.enabled
		if(command_enabled){
			processCommand(loc_Command,WindowId)
		}
	}
	WinActivate, %SwitchBack%
}

processCommand(Command, WindowId){
	global
	command_id := Command.id
	command_command := Command.command
	command_freq := Command.freq
	command_prefix := Command.prefix
	command_response := Command.response
	;msgbox % command
	if(checkInterval(command_id,command_freq) == True){
		;msgbox Fired
		BlockInput, On ; Temporarily block input in the event user is typing while the command runs
		WinActivate, ahk_id %WindowId%
		if(command_prefix){
			Send %botPrefix% %command_command%{enter}
		}
		else{
			Send %command_command%{enter}
		}

		if(command_response != ""){
			Sleep 3000
			Send %command_response%{enter}
		}

		Sleep 1500
		BlockInput, Off ; Resume input
	}else{
		; Do Nothing
	}
}

loadConfig(){
	global 

	; Verify existance of json file
	IfNotExist, beggar_config.json
	{
		msgbox % "Unable to find beggar_config.json"
		ExitApp, 0
	}
	; Load file to String
	FileRead, jsonString, beggar_config.json
	; Parse JSON
	Data := JSON.Load(jsonString)

	; Set basic Preferences
	winTitle := Data.Preferences.Application.winTitle
	winClass := Data.Preferences.Application.winClass
	hideGui := Data.Preferences.Application.hideGui
	counterFile := Data.Preferences.Application.counterFile
	botPrefix := Data.Preferences.Bot.prefix
	debug := Data.Preferences.Application.debug
	commands := Data.Commands

	loadCommands()
	;msgbox % winTitle
}

; Simply creates a new variable, last_run for all commands
loadCommands(){
	global
	for each, loc_Command in Commands
	{
		command_enabled := loc_Command.enabled
		command_id := loc_Command.id
		if(command_enabled){
			last_run%command_id% = 0
		}
	}
}

; Checks when the command was last run, and returns true if ready to run again, otherwise false
checkInterval(command_id, frequency){
	global
	last_run_var = last_run%command_id%
	
	Now := A_TickCount
	;StartTime := last_run%command_id%
	StartTime := Fetch_Counter(last_run_var)
	;msgbox % StartTime
	difference := Ceil((Now-StartTime)/1000)
	;msgbox % difference
	DEBUG(last_run_var "_difference", difference)

	if(StartTime == 0 || difference > frequency){
		DEBUG(last_run_var "_pre", last_run%command_id%)
		last_run%command_id% := Now
		; msgbox, Fired
		DEBUG(last_run_var "_post", last_run%command_id%)
		Update_Counter(last_run_var, last_run%command_id%)
		DEBUG(last_run_var "_fired", True)
		return True
	}

	DEBUG(last_run_var "_fired", False)

	; Clean up some memory
	StartTime =
	difference =
	last_run_var =
	last_run%command_id% = 
	Now = 

	return False
}

DEBUG(key, value){
	global
	if(debug == 1){
		IniWrite, %value%, debug.ini, Debug, %key%
	}
}

Update_Counter(key, value){
	global
	IniWrite, %value%, %counterFile%, Counts, %key%
}

Fetch_Counter(key){
	global
	IniRead, Output, %counterFile%, Counts, %key%, 0
	return %Output%
}

Build_Menu(){
	global

	Menu, OpenWindows, Add,
	
	Menu,Tray,DeleteAll
	Menu,Tray,NoStandard
	Menu,Tray,Add, %AppName% v%version%, ShowGui
	Menu,Tray,Tip, %AppName% v%version%
	Menu,Tray,Add,
	Menu, Tray, Add, Open Windows, :OpenWindows
	Menu,Tray,Add,&Edit Config, ShowConfig
	Menu,Tray,Add,
	Menu,Tray,Add,&Reload, Reload
	Menu,Tray,Add,
	Menu,Tray,Add,E&xit, Exit
}

dumpIcon(){
	global
	IfNotExist, %A_ScriptDir%/dank.png
		Extract_icon(A_ScriptDir . "/" . "dank.png")
	Menu, Tray, Icon, %A_ScriptDir%/dank.png
}

ShowGui:
Gui, Show,, %AppName% v%version%
return

ShowConfig:
	openInNotepad(A_ScriptDir . "/beggar_config.json")
return

doNothing:
return

openInNotepad(file_path){
	IfNotExist, %file_path%
	{
		msgbox,,%AppName%, File Not Found
		return
	}
	Run Notepad.exe %file_path%
}

Reload:
Reload
return

Exit:
ExitApp

Extract_icon(_Filename, _DumpData = 0)
{
	;This function "extracts" the file to the location+name you pass to it.
	Static HasData = 1, Out_Data, Ptr, ExtractedData
	Static 1 = ""
	Static 2 = ""
	Static 3 = "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"
	
	If (!HasData)
		Return -1
	
	If (!ExtractedData){
		ExtractedData := True
		, Ptr := A_IsUnicode ? "Ptr" : "UInt"
		, VarSetCapacity(TD, 37458 * (A_IsUnicode ? 2 : 1))
		
		Loop, 3
			TD .= %A_Index%, %A_Index% := ""
		
		VarSetCapacity(Out_Data, Bytes := 27341, 0)
		, DllCall("Crypt32.dll\CryptStringToBinary" (A_IsUnicode ? "W" : "A"), Ptr, &TD, "UInt", 0, "UInt", 1, Ptr, &Out_Data, A_IsUnicode ? "UIntP" : "UInt*", Bytes, "Int", 0, "Int", 0, "CDECL Int")
		, TD := ""
	}
	
	IfExist, %_Filename%
		FileDelete, %_Filename%
	
	h := DllCall("CreateFile", Ptr, &_Filename, "Uint", 0x40000000, "Uint", 0, "UInt", 0, "UInt", 4, "Uint", 0, "UInt", 0)
	, DllCall("WriteFile", Ptr, h, Ptr, &Out_Data, "UInt", 27341, "UInt", 0, "UInt", 0)
	, DllCall("CloseHandle", Ptr, h)
	
	If (_DumpData)
		VarSetCapacity(Out_Data, 27341, 0)
		, VarSetCapacity(Out_Data, 0)
		, HasData := 0
}
